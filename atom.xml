<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Youngjae&#39;s Blog</title>
  
  <subtitle>개발에 관심이 많은 비개발자</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://bityoungjae.com/"/>
  <updated>2019-10-26T20:16:03.852Z</updated>
  <id>https://bityoungjae.com/</id>
  
  <author>
    <name>Joo Youngjae</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>단락평가 혹은 지름길평가</title>
    <link href="https://bityoungjae.com/2019/10/27/JavsScript/%EB%8B%A8%EB%9D%BD%ED%8F%89%EA%B0%80_%ED%98%B9%EC%9D%80_%EC%A7%80%EB%A6%84%EA%B8%B8%ED%8F%89%EA%B0%80/"/>
    <id>https://bityoungjae.com/2019/10/27/JavsScript/단락평가_혹은_지름길평가/</id>
    <published>2019-10-26T17:14:39.000Z</published>
    <updated>2019-10-26T20:16:03.852Z</updated>
    
    <content type="html"><![CDATA[<h1 id="단락평가-지름길-평가-Short-circuit-evaluation"><a href="#단락평가-지름길-평가-Short-circuit-evaluation" class="headerlink" title="단락평가, 지름길 평가 (Short-circuit evaluation)"></a>단락평가, 지름길 평가 (Short-circuit evaluation)</h1><p>자바스크립트의 논리연산자를 기본 용도인 참/거짓의 판단을 위해 사용하는 것이 아닌,<br>조건문을 대체해 사용하는 일종의 문법 설탕이라고 볼 수 있다.</p><h2 id="기본원리"><a href="#기본원리" class="headerlink" title="기본원리"></a>기본원리</h2><p>단락평가는 결국 조건연산자가 가진 아래의 두가지 특성을 응용한 것이다.</p><h3 id="조건연산자의-좌결합성"><a href="#조건연산자의-좌결합성" class="headerlink" title="조건연산자의 좌결합성"></a>조건연산자의 좌결합성</h3><p>and연산자(&amp;&amp;)와 or연산자(||) 모두 좌결합성을 가진다.<br>즉, 피연산자의 평가순서가 왼쪽부터 오른쪽 순으로 진행이 된다.</p><h3 id="조건연산자의-평가결과"><a href="#조건연산자의-평가결과" class="headerlink" title="조건연산자의 평가결과"></a>조건연산자의 평가결과</h3><p>조건연산자는 Boolean 값을 반환하지 않는다.<br>최종적으로 평가된 피연산자의 평가결과를 반환한다.</p><h2 id="amp-amp-and"><a href="#amp-amp-and" class="headerlink" title="&amp;&amp; - and"></a>&amp;&amp; - and</h2><p>and 연산자의 경우 앞에 위치한 피연산자의 평가결과가 Falsy값일 경우<br>굳이 이후의 피연산자를 평가하지 않아도 false가 되기에<br>&amp;&amp; 연산자는 false로 평가된 피연산자 이후의 피연산자를 평가하지 않는다.</p><p>역으로 생각해보면 and 연산자는 앞에 위치한 피연산자의 평가결과가 Truthy값 이어야만,<br>뒤쪽의 피연산자를 평가하여 그 결과를 반환한다는 이야기가 된다.</p><h3 id="용도1-단순-if문의-대체"><a href="#용도1-단순-if문의-대체" class="headerlink" title="용도1 : 단순 if문의 대체"></a>용도1 : 단순 if문의 대체</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1 condition이 true라면 doSomething 함수를 실행</span></span><br><span class="line"><span class="hljs-keyword">if</span> (condition) &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 2 위 코드와 동일하다.</span></span><br><span class="line">condition &amp;&amp; doSomething();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 3 좌결합성이기 때문에 조건을 계속 이어붙일 수 있다.</span></span><br><span class="line">condition1 &amp;&amp; condition2 &amp;&amp; doSomething();</span><br></pre></td></tr></table></figure><h3 id="용도2-null-undefined에-대한-대응"><a href="#용도2-null-undefined에-대한-대응" class="headerlink" title="용도2 : null, undefined에 대한 대응"></a>용도2 : null, undefined에 대한 대응</h3><p>null이나 undefined인 값에 대해 .연산자나 []연산자를 통해 멤버접근을 시도하고자 하면,<br>속성을 읽을 수 없다는 내용의 TypeError 가 발생한다.</p><p>&amp;&amp; 연산자를 활용하면 이를 예방할 수 있다.</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> bark = <span class="hljs-function">(<span class="hljs-params">animal</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">    animal이 null이나 undefined가 아닐 경우 animal.sound에 접근한다.</span></span><br><span class="line"><span class="hljs-comment">    null, undefined 외의 데이터 타입에 대해서는 해당 멤버가 존재하지 않더라도</span></span><br><span class="line"><span class="hljs-comment">    undefined 만을 반환할 뿐, TypeError가 발생하지 않는다.</span></span><br><span class="line"><span class="hljs-comment">    */</span></span><br><span class="line">    <span class="hljs-keyword">return</span> animal &amp;&amp; animal.sound;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="or"><a href="#or" class="headerlink" title="|| - or"></a>|| - or</h2><p>or 연산자의 경우 앞에 위치한 피연산자의 평가결과가 Truthy 값일 경우<br>굳이 이후의 피연산자를 평가하지 않아도 true가 되기에<br>|| 연산자는 앞쪽의 피연산자의 평가결과를 그대로 반환하고 뒤쪽의 피연산자는 평가하지 않는다.</p><p>역으로 생각해보면 or 연산자는 앞에 위치한 피연산자의 평가결과가 Falsy값이라면,<br>무조건 뒤쪽의 피연산자를 평가하여 그 결과를 반환한다는 이야기가 된다.</p><h3 id="용도1-기본값-설정"><a href="#용도1-기본값-설정" class="headerlink" title="용도1 : 기본값 설정"></a>용도1 : 기본값 설정</h3><p>두 개의 피연산자가 있을 경우, 앞 부분이 falsy값일 때,<br>보통 undefined나 null인 경우 argument가 정상적으로 전달되지 않았다고 가정하고<br>뒷 부분의 피연산자를 평가해 기본값으로 사용한다.</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> bark = <span class="hljs-function">(<span class="hljs-params">animal</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> sound = animal &amp;&amp; animal.sound;</span><br><span class="line">    <span class="hljs-keyword">return</span> sound || <span class="hljs-string">"호로로로롤"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 혹은 &amp;&amp;와 같이 이어붙여서 사용하면.. (체이닝)</span></span><br><span class="line"><span class="hljs-keyword">const</span> bark = <span class="hljs-function">(<span class="hljs-params">animal</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">    조건 연산자의 우선순위가 ||보다 &amp;&amp; 가 높아서 아래와 같이 표현도 가능하지만,</span></span><br><span class="line"><span class="hljs-comment">    좀 더 명확하게 괄호로 묶어서 표현하거나 위 처럼 별 개의 라인으로 구분지어 놓는 것이 좋을 것 같다.</span></span><br><span class="line"><span class="hljs-comment">    */</span></span><br><span class="line">    <span class="hljs-keyword">return</span> animal &amp;&amp; animal.sound || <span class="hljs-string">"호로로로롤"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="용도2-여러-후보군-중-하나를-골라내야할-때"><a href="#용도2-여러-후보군-중-하나를-골라내야할-때" class="headerlink" title="용도2 : 여러 후보군 중 하나를 골라내야할 때"></a>용도2 : 여러 후보군 중 하나를 골라내야할 때</h3><p>앞 부분에서 Truthy 값이 나오면 뒷 부분을 평가하지 않는다는 특성을 활용해,<br>있을지 없을지 보장할 수 없는 여러 후보군에 대해 존재하는 하나를 골라낼 때 활용이 가능하다.</p><p>각 피연산자들을 같은 용도의 여러 선택지들이라고 가정할 때,<br>기회비용이 작은 순으로 좌에서 우로 나열해야한다.</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">lightFunc가 가벼우니까 있으면 먼저 사용해보고,</span></span><br><span class="line"><span class="hljs-comment">없으면 어쩔 수 없지.. 무겁지만 heavyFunc라도 사용하자.</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line">(lightFunc || heavyFunc)();</span><br></pre></td></tr></table></figure><h2 id="주의사항"><a href="#주의사항" class="headerlink" title="주의사항"></a>주의사항</h2><p>단락평가의 경우 용도야 만들면 다양하겠지만,<br>코드의 가독성과 간결성을 위해서가 아니라면 굳이 억지로 사용해서 문법 닌자가 되지 말자.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;단락평가-지름길-평가-Short-circuit-evaluation&quot;&gt;&lt;a href=&quot;#단락평가-지름길-평가-Short-circuit-evaluation&quot; class=&quot;headerlink&quot; title=&quot;단락평가, 지름길 평가 (Short-
      
    
    </summary>
    
    
      <category term="JavsScript" scheme="https://bityoungjae.com/categories/JavsScript/"/>
    
    
      <category term="단락평가" scheme="https://bityoungjae.com/tags/%EB%8B%A8%EB%9D%BD%ED%8F%89%EA%B0%80/"/>
    
      <category term="지름길평가" scheme="https://bityoungjae.com/tags/%EC%A7%80%EB%A6%84%EA%B8%B8%ED%8F%89%EA%B0%80/"/>
    
      <category term="short-circuit evaluation" scheme="https://bityoungjae.com/tags/short-circuit-evaluation/"/>
    
      <category term="javscript" scheme="https://bityoungjae.com/tags/javscript/"/>
    
  </entry>
  
  <entry>
    <title>해시함수에 대하여</title>
    <link href="https://bityoungjae.com/2019/10/26/ETC/%ED%95%B4%EC%8B%9C%ED%95%A8%EC%88%98%EC%97%90_%EB%8C%80%ED%95%98%EC%97%AC/"/>
    <id>https://bityoungjae.com/2019/10/26/ETC/해시함수에_대하여/</id>
    <published>2019-10-26T10:04:39.000Z</published>
    <updated>2019-10-26T17:34:23.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="해시함수란"><a href="#해시함수란" class="headerlink" title="해시함수란"></a>해시함수란</h1><p>해시함수는 임의의 길이의 데이터를 입력받아 일정한 길이의 비트열로 반환 시켜주는 함수이다.</p><p><strong>입력값의 길이가 달라도 출력값은 언제나 고정된 길이로 반환한다.</strong></p><p><strong>동일한 값이 입력되면 언제나 동일한 출력값을 보장한다.</strong></p><h2 id="암호화-해시-함수란"><a href="#암호화-해시-함수란" class="headerlink" title="암호화 해시 함수란"></a>암호화 해시 함수란</h2><p><strong>암호화 해시 함수</strong> 는 이 해시함수의 부분집합으로 역상저항성과 제2역상저항성 그리고 충돌저항성을 가지고 있어 암호화에 활용될 수 있는 경우를 의미한다.</p><h2 id="암호화-해시-함수의-특성과-효과들"><a href="#암호화-해시-함수의-특성과-효과들" class="headerlink" title="암호화 해시 함수의 특성과 효과들"></a>암호화 해시 함수의 특성과 효과들</h2><ul><li><strong>역상저항성</strong>은 입력값 A에 의해 B가 출력되었다면, <strong>출력된 B값만 주어졌을 때</strong> 입력값인 A값을 찾는 것이 <strong>계산적으로 불가능함</strong>을 의미한다.</li><li><strong>제2역상저항성</strong> 은 <strong>입력값 A와 출력값 B가 모두 주어졌을 때</strong>, 똑같은 B를 반환하는 A2 를 찾아내거나 만들어내는 것이 <strong>계산적으로 불가능함</strong>을 의미한다.</li><li><strong>단방향 암호화</strong>라고도 하는데 양방향 암호화가 A를 B로 암호화하고 다시 B를 A로 복호화하여 원본 내용을 확인할 수 있다면, 단방향 암호화는 A로 만들어진 B를 가지고 다시 A로 역산할 수 없다.</li><li><strong>충돌저항성</strong>은 똑같은 B라는 출력값이 나오는 X가 단일하지 않고 중복이 되는 또 다른 Xn을 발견하는 것이 <strong>계산적으로 어려운</strong> 성질을 의미한다. <em>충돌저항성은 <strong>제2역상저항성</strong>의 <strong>외부효과(부수효과, Side effect)</strong> 이자 <strong>부분집합</strong> 이다.</em></li><li><strong>압축효과</strong> 암호화 해시 함수가 반환하는 일정한 길이의 작은 해시값만으로 크기가 거대한 데이터의 무결성을 보장할 수 있는 외부효과를 의미한다. 예를 들어 <strong>SHA-256</strong>의 경우 100GB의 파일도 단 256bit의 해시값으로 그 내용의 무결성을 보장할 수 있다.</li></ul><h2 id="눈사태-효과"><a href="#눈사태-효과" class="headerlink" title="눈사태 효과"></a>눈사태 효과</h2><p><strong>눈사태 효과</strong> 란 입력값의 <strong>아주 작은 변화</strong>로도 결과값이 <em>전혀 다르게</em> 도출되는 효과를 의미한다.<br>입력값에 점 하나만 추가되어도 전혀 다른 출력값이 출력된다.</p><p><em>또한 변경되는 부분에 있어 어떠한 규칙성도 찾을 수 없다.</em></p><h3 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h3><p>아래는 <strong>SHA1 함수</strong>를 이용해 비슷한 문자열을 암호화한 결과값들이다.</p><ul><li>“주영재” -&gt; <code>DDB0ED48A84B6C328E50B3BFB3D15364C669C3A6</code></li><li>“주영째” -&gt; <code>1C2FC56A4172A9B6D5C3C20309A46C01896D3194</code></li><li>“주형재” -&gt; <code>1DA926EEF1EF8533F57A45124871F8550A278EA9</code></li></ul><h2 id="용도"><a href="#용도" class="headerlink" title="용도"></a>용도</h2><ul><li><strong>파일의 Checksum(검사합)을 구한다.</strong><ul><li><strong>SuperVaccine.exe</strong> 이라는 가상의 컴퓨터 바이러스 백신 프로그램을 다운로드 받았다고 가정해보자.</li><li>만약에 어떤 블랙 해커가 해당 백신 사이트를 해킹해서 설치파일을 비슷한 모양새로 동작하지만 오히려 치명적인 바이러스가 포함된 파일로 변조를 했다면 .. ?</li><li>혹은 다운로드 프로그램의 문제나 보관 방식의 문제로 인해 어떤 파일의 내용에 부분적인 결손이 의심된다면 … ?<ul><li>우선 전자의 경우 블랙 해커는 <strong>제2역상저항성</strong> 으로 인해 똑같은 Checksum을 가지는 바이러스 파일을 만들 수 없다.</li><li><strong>눈사태효과</strong>로 인해 아주 미세한 결손이나 위변조가 발생되어도 Checksum 값이 완전히 달라지게 된다.</li></ul></li><li>이 때 내가 받은 설치파일이 올바른 파일이 맞는지 또 제대로 손실없이 받아진 파일이 맞는지 확인하기 위해 해당 설치파일의 데이터를 입력값으로 하여 생성된 해시값을 공식 홈페이지나 다른 공인된 인터넷 페이지에 공개된 해시값과 비교하여 검증할 수 있다.</li><li>이상이 없는 파일이라면 내가 받은 파일을 같은 함수로 검증했을 때, 공개된 해시값과 동일한 해시값이 출력될 것이기 때문이다.</li><li>마치 해시값을 어떤 데이터의 <strong>지문Fingerprint</strong> 처럼 활용하는 경우이다.</li></ul></li><li><strong>암호를 저장한다</strong><ul><li>회원가입 기능을 제공하는 인터넷 서비스를 만든다 가정했을 때 가입된 회원들의 암호를 날 것 그대로 저장하면 안된다.</li><li>사용자 암호의 <strong>원문</strong>이 아닌 <strong>해시 암호화한 값</strong>을 DB에 저장해놓고, 이후 회원이 로그인을 시도할 때 입력한 암호를 <strong>동일한 해시함수로 암호화</strong>하여 DB의 해시값과 <strong>비교한다.</strong> 이 경우 원본 암호를 서버에 기록하지 않고도 유저들은 불편함 없이 평소에 사용하던 암호를 로그인에 활용할 수 있게 된다.</li><li>또한, 우리의 가상 서비스가 해킹이 되어 회원들의 DB가 유출이 되더라도 해커는 <strong>역상저항성</strong>으로 인해 회원들의 진짜 암호를 알아낼 수 없다.</li></ul></li><li><strong>해시테이블에서의 활용.</strong><ul><li>어떤 데이터의 목록에서 특정 데이터를 조회한다고 생각해보자.</li><li>일반적인 방법으로는 데이터를 첫번째 순서부터 하나하나 대조해보거나 특정한 규칙에 따라 순차적으로 각 요소들을 대조하여 특정한 값을 찾아내는 방법이 있다.</li><li>해시함수의 <strong>충돌저항성</strong>을 활용해 데이터를 저장할 때 해당 데이터의 해시값을 별도로 원하는 데이터를 찾아낼 수 있는 ‘키값’ 으로 활용한다면?</li><li>각 데이터의 전체값을 비교하지 않고도 일정 길이의 해시값을 이용해 원하는 데이터를 찾아낼 수 있다.</li><li>별도의 탐색절차 없이 그 즉시 원하는 데이터를 추출할 수 있으므로 궁극의 탐색 알고리즘이다.</li></ul></li></ul><h3 id="블록체인에서-해시함수의-쓰임새"><a href="#블록체인에서-해시함수의-쓰임새" class="headerlink" title="블록체인에서 해시함수의 쓰임새"></a>블록체인에서 해시함수의 쓰임새</h3><p><em>아래의 내용은 필자가 관련 분야의 전문가가 아님을 감안하고 읽어주면 감사하겠다.</em></p><p>블록체인을 아주 높은 수준에서 추상화해서 다음 블록이 그 이전 블록에 체인을 걸고 또 다음 블록이 그 이전 블록으로 체인을 걸고.. 이런 식으로 기차들 처럼 모든 블록들이 선형으로 줄줄이 이어져 있는 모양새라고 생각해보자.</p><p><strong>앞선 블록</strong>들은 어떤 목적을 위해 포함하고 있는 내용들이 절대 변경되서는 안된다라고 규칙을 정했을 때..<br><em>(코인의 <strong>과거 거래 이력</strong>은 상식적으로 당연히 변동이 있어서는 안된다)</em></p><p>이를 실현하기 위해 각 블록들은 자기 자신의 ‘내용’을 해싱해서 해시값을 갖고(블록헤더라고 칭해보자), 자기자신의 해시값을 갖고 있음은 물론 그 <strong>이전 블록의 해시값</strong>을 참조하게 된다.<br><em>(이전 블록의 해시값을 다음 블록이 참조한다라는 것을 앞서 이야기한 체인을 거는 비유의 구체적인 실체이다)</em></p><p>혹시라도 어떤 나쁜 사람이 자신의 이익을 위해 가거 블록의 내용을 변경하게 된다면 그 블록의 해시값이 변경되고(눈사태효과, 쇄도효과에 의해)..<br>그 이후 블록은 이전 블록을 해시값으로 참조하고 있기 때문에 연결이 단선되고, 만약에 그 나쁜 사람이 변경된 내용을 거래에 참여하는 모든 사람들에게 인정받고자 한다면 그 이후 모든 블록들의 해시값을 전부 다시 만들어 내야 될 것이다.</p><p>위 설명에서 블록체인에서 해시함수는 각 블록을 연결시키는 체인의 용도로써, 또 과거 이력의 변경을 감지하는 역할로써 사용한다라고 정리해볼 수 있을 것이다.</p><p>블록체인에서 해시함수의 또 다른 용도에 대해 설명해보겠다.</p><p>비트코인과 관련하여 ‘채굴’이라는 용어를 많이 들어봤을 것인데, ‘채굴’을 조금 더 전문적인 용어로 <strong>작업증명(Proof of work)</strong>이라고 하고, 그 진짜 의미는 ‘해시함수를 활용한 어떤 퍼즐을 풀어내는 일’이다.</p><p>해시함수를 이용해 의도적으로 계산적 소모량을 유발하는 퍼즐을 만들어 이 퍼즐을 풀어냈을 때 작업증명을 해냈다 혹은 채굴에 성공했다라고 한다.</p><p>그 과정을 대략적으로 설명하자면,<br>우선 해당 블록의 거래내역을 참조한 해시값(정확한 용어로 Merkle root 해시값), 이전 블록의 블록해시, 블록 생성시각 등등 <strong>고정된 데이터</strong>들의 집합이 재료로 주어지고,</p><p>이 변경될 수 없는 데이터에 <strong>nonce</strong> 라는 이름의 <strong>Salt(해시값을 바꾸기 위해 첨가하는 임의의 숫자)</strong> 를 계속 바꿔 더해가며 특정한 조건의 <strong>SHA256 해시값</strong>을 찾는 과정이라고 보면된다.</p><p>이 조건이라는 것은 nonce를 계속 증가시켜가며 만들어낸 해시값이 <code>00000000A84B6C328E50B3BFB3D15364C669C3A6</code> 와 같이 앞에 0이 몇 개 이상 있어야 된다 같은 것이다.</p><p>확률적으로 (1/16)<sup>n</sup>이 될텐데,<br>암호화 해시함수를 통해 특정 해시값을 만들어내기 위해선 어떠한 지적 추론도 불가능하고 오로지 컴퓨팅 파워를 이용한 수많은 시행착오를 반복할 수 밖에 없다는 특징을 응용한 것이다.</p><p>앞서 체인을 만드는 용도로써 해시함수를 설명할 때, 과거 내용을 변조하려는 공격자의 예를 들었는데..</p><p>이 공격자가 왜 공격을 실패할 수 밖에 없는지..<br>해시퍼즐을 통해 유발되는 계산적 소모량이 그 정답이 된다.<br>변조하려는 블록부터 시작하여 이후 모든 블록의 해시값을 계산해야되고 그 이후 새롭게 생성되는 블록들의 해시값도 전부 다 다시 계산해야 한다면..<br>어떤 누가 쉽게 공격을 하려는 의지를 갖을 것이며, 그 공격이 성공할 수 있을까?</p><h2 id="취약한-부분과-충돌쌍"><a href="#취약한-부분과-충돌쌍" class="headerlink" title="취약한 부분과 충돌쌍"></a>취약한 부분과 충돌쌍</h2><p>y = 2x 라는 함수를 가정했을 때 y가 A인 x를 찾아내는 과정을 역산이라고 한다.</p><blockquote><p>y가 12라면,</p><ol><li>12 = 2x</li><li>12 / 2 = x</li><li>6 = x</li></ol></blockquote><p>해시함수는 그 구현내용이 공개되어 있음에도 이러한 과정으로 원본값을 알아내는 역산이 계산상 불가능하다.</p><p>하지만 역산 외의 방법으로도 B를 반환하는 An에 대해 탐색할 수 있는 다양한 방법들이 존재하는데</p><p>예를 들자면, 해당 해시함수에 의해 도출될 수 있는 방대한 경우의 수를 기록해 사전과 같은 형태로 만들어둔 후 해당 사전에서 A값을 찾아내어 대조해보는 방식(Rainbow attack) 이나,</p><p>반환값 B가 나오는 A 혹은 A2를 찾기 위해 임의의 경우의 수를 f(<strong>x</strong>)의 <strong>x</strong>에 무차별적으로 대입하여 찾아내는 방법(무차별 대입법, Brute-force attack)이 있을 수 있다.</p><p>단순 무식한 방법처럼 보일 수 있으나 컴퓨터는 이러한 단순 작업을 불평없이 수억번 수백억번 반복 수행하는데 특화된 기계이다.</p><p>또한, 컴퓨팅 파워가 나날이 발전하고 <strong>해시함수 연산을 위한 주문형 반도체</strong>가 등장하면서 현재의 암호화 해시 함수는 미래에 보안상 완결성을 상실할 가능성을 충분하게 가지고 있다.</p><p>일례로 1977년에 개발된 어떤 암호화 함수(RSA-129)의 개발자(Ronald Rivest)는 자신의 함수로 암호화된 메시지가 해독되는데 <strong>4경년</strong>이 걸릴 것으로 자신있게 예상했으나, 불과 <strong>17년 만인</strong> 1994년에 해독이 되어버린 사례가 있다.</p><p>더 가까운 과거의 사례로는 <strong>MD5</strong> 라는 암호화 해시 함수의 예를 들 수 있는데,</p><p>현재 MD5 해시값을 복호화하는 인터넷 사이트를 구글링만으로 쉽게 찾아볼 수 있는가 하면,</p><p><a href="https://www.md5online.org/md5-decrypt.html" target="_blank" rel="noopener">MD5 Decryption</a> - (MD5에 대한 Rainbow attack 의 예시)</p><p>심지어 서로 다른 문자열을 출력하는 두 개의 프로그램이 각각 똑같은 MD5 해시값을 갖는 경우도 발견되어 있다.</p><p><a href="https://www.mscs.dal.ca/~selinger/md5collision/" target="_blank" rel="noopener">MD5 Collision Demo</a></p><p>2011년까지 미국 표준으로 자리 잡았던 <strong>SHA1</strong>의 경우에도 <strong>충돌쌍(똑같은 해시값을 반환하는 서로 다른 데이터의 쌍)</strong> 이 아래와 같이 발견된 예시가 있다.<br>해당 페이지에서는 동일한 SHA1 체크섬을 가진 두 개의 다른 PDF를 예시로 들고 있다.</p><p><a href="https://shattered.io/" target="_blank" rel="noopener">SHA1 충돌쌍 예시</a></p><p><strong>생각해보면 입력값의 길이가 출력값의 길이보다 길어질 수 있다면 출력값의 충돌은 필연적으로 발생할 수 밖에 없기도 하다.</strong></p><p>즉, 충돌쌍을 발견함에 있어서 충돌되는(중복되는) 경우가 확률적으로 아주 희소할지 몰라도, 무조건 하나 이상은 100%의 확률로 존재할 수 있다. (비둘기집 원리)</p><h3 id="생일-역설-Birthday-Paradox"><a href="#생일-역설-Birthday-Paradox" class="headerlink" title="생일 역설 Birthday Paradox"></a>생일 역설 Birthday Paradox</h3><p>역설이란 보통 일반적인 생각에 반대되는 이론이나 말을 뜻한다.</p><p>일반적인 상식으로 당연히 A 가 맞다고 생각해왔는데 과학적으로 검증해보니 사실은 전혀 엉뚱한 B 가 진실인 경우들이 있다.</p><p>이 생일 역설 역시 그런한 경우인데,</p><p>이 역설은 처음 아래의 질문에서 출발한다.</p><p>“<strong>n명의 사람이 임의로 모였을 때 우연히 생일이 중복되는 사람이 두 명 이상 있을 확률은 얼마나 될까?</strong>“</p><p>일단 1년은 365일 이므로 366명이 모이면 <strong>비둘기집 원리</strong>에 따라 <strong>100%</strong> 최소 한 쌍은 생일이 중복될 것이 분명하다.</p><h3 id="이렇게-생각해보자"><a href="#이렇게-생각해보자" class="headerlink" title="이렇게 생각해보자"></a>이렇게 생각해보자</h3><p>당신은 방송국 PD이다.<br>세간에 유명한 “생일이 같은 사람은 비슷한 성격을 갖는다” 라는 속설에 대한 실험카메라 프로그램을 만들고자 한다.</p><p>그래서 생일이 같은 사람을 찾아야 하는데,<br>문득 그런 사람들을 찾자고 (비둘기집 원리에 따라)366명이나 인터뷰를 해야되나라는 생각이 드니 눈 앞이 아득해지기 시작한다.</p><p>파일럿 프로그램이라 주어진 시간적, 경제적 자원이 많지 않기 때문이다.</p><p>그렇다고 좋은 기획을 날리기는 싫어서 울며 겨자먹기식으로 밖으로 나가 사람들을 인터뷰하는데 겨우 51명째에 벌써 생일이 같은 두 사람을 찾아내 버렸다.</p><p>당신은 속으로 생각한다.</p><p>“<strong>이거 정말 운이 좋구만! 우리 프로그램이 잘 되려는 징조인가보다!</strong>“</p><h3 id="과연-그럴까"><a href="#과연-그럴까" class="headerlink" title="과연 그럴까"></a>과연 그럴까</h3><p>과연 당신은 정말 기가 막히게 운이 좋았던 것일까?</p><p>사실은 아니다.</p><p>왜냐하면 사실 임의로 모인 <strong>50명의 사람들</strong> 중에서 생일이 중복되는 사람을 한 쌍 이상 찾아낼 확률이 무려 <strong>97%</strong> 이상 되었기 때문이다.</p><p>이번엔 100% 가까운 확률까지는 필요 없으니 그냥 두 번 조사했을 때 한 번만 나와도 되게끔 <strong>50%</strong> 정도로만 목표를 낮춰보겠다고 하자.</p><p>이 때 필요한 인원수를 계산하면 놀랍게도 그 수는 <strong>23명</strong>으로 파격적으로 줄어들게 된다.</p><p>이렇듯 확률의 목표값을 활용 가능한 범위내로 아주 약간 낮춤으로써 중복된 값을 찾아내는 비용을 파격적으로 낮출 수 있다는 점이 이 생일 역설의 골자가 되는 내용이다.</p><p>생일은 불과 365가지의 경우의 수를 가진다.<br>하지만 해시 함수의 영역에서는 2<sup>126</sup> 같은 엄청난 크기의 경우의 수를 갖게 되는데,<br>이 안에서 n개의 임의의 서로 다른 데이터를 모아 중복되는 경우를 찾는 일은 실로 엄청난 컴퓨팅 비용이 필요하게 될 것이고 이는 경제적인 비용 문제로 이어질 것이다.<br><em>(충돌쌍을 찾는다고 한다, 위에서 언급한 생일찾기와 닮아있다)</em></p><p>하지만 이 생일역설이 해시함수의 충돌쌍을 찾는 일에도 적용된다면 생각보다 적은 비용을 가지고도 충돌쌍을 찾는 일을 할 수 있을 것이다.</p><p>실제로 충돌쌍을 찾는 확률을 50%로 맞추면 <strong>2<sup>(n/2)</sup></strong> 의 표본만 있으면 된다고 한다.</p><p>출력값의 길이가 2<sup>10</sup>(1024) 라는 암호화 해시함수가 있다고 가정했을 때, 2<sup>5</sup>(32)회의 무차별 대입을 통해 무려 50%의 확률로 충돌쌍을 찾아낼 수 있게되는 것이다.</p><p><strong>경제성이 없어 포기할 수도 있었던 일을 생일 역설을 통해 다시 경제성이 있는 일로 판단할 수 있게 된 것이다.</strong></p><h3 id="그럼에도-불구하고"><a href="#그럼에도-불구하고" class="headerlink" title="그럼에도 불구하고"></a>그럼에도 불구하고</h3><p>확률적으로 n 비트의 출력값을 가지는 해시함수의 경우 <strong>2<sup>(n/2)</sup></strong> 가지의 입력값을 조사할 경우 충돌쌍을 발견할 확률이 50% 정도가 된다고 했다. <em>(엄밀히 말하면 이보다 조금 더 많은 가짓수가 필요)</em></p><p>128bit의 출력값을 가지는 MD5의 경우 약 <strong>2<sup>64</sup></strong> 의 서로 다른 데이터를 만들어 무차별 대입하는 공격을 시도하면 50%의 확률로 1개 이상의 충돌쌍을 발견할 수 있다는 이야기이다.</p><p><strong>2<sup>64</sup></strong> 가 얼마나 많은 경우의 수인지 짐작 어려울 것 같아 이를 <strong>10진수</strong>로 표현하면 아래와 같음을 참고하기 바란다.</p><blockquote><p>18,446,744,073,709,551,617 개의 경우의 수를 가진다.</p></blockquote><p>차수가 1씩 늘어날 때 위 숫자에 곱하기 2씩 해야되는 것이다. 당연하게도 출력값의 길이가 길어질 수록 경우의 수는 무차별적으로 증가한다.</p><p>필자가 위 생일 역설을 참고해 <strong>n개의 데이터가 m종류의 해시값에 대해 하나 이상의 중복값을 가질 확률</strong>을 계산해 보았더니, 128bit의 출력값을 가지는 해시함수의 경우 백억번이라는 어마무시한 분량의 무차별 대입 공격법을 시도해도 그 확률은 0에 수렴했다.</p><p><em>(파이썬으로 구현해 pypy3로 돌렸다. 구현내용은 너무 단순무식 + 허접하여 차마 공개하지 못 하겠다 ㅠㅠ)</em></p><p><strong>64bit</strong>의 출력값을 가지는 해시함수의 경우에도 <strong>일억번의 무차별 대입</strong>을 가정했을 때, 그 확률은 약 <code>0.00027101407375584863</code> 로 계산되었다.</p><p>앞서서 구글에서 <strong>SHA1</strong> 의 충돌쌍을 발견한 경우를 간단히 링크로 소개했는데, 그 결과를 도출해내는데 있어 <strong>약 9경번의 연산</strong>이 필요했으며, <strong>수억원의 가치에 상응하는 경제적 비용</strong>이 필요했다고 한다. <em>(SHA1은 160bit의 결과값을 가진다. 가성비가 0에 수렴한다는 이야기)</em></p><p>이러한 이유로 전문가들이 충돌쌍이 하나가 발견되었던 어쨌던 실제 응용 환경에 적용할만한 공격은 발견되지 않았다..라고 하는 것 같다.</p><p>고로, <strong>일상적인 경우</strong>.. 그러니까 뭐 인덱스로 사용한다거나 체크섬 생성 용도로 이용하는데 있어서는 대충 SHA1 이상 아무 해시함수나 사용해도 전혀 무리가 없다는 이야기 정도로 결론 지으면 될 것 같다.</p><h2 id="종류와-선택"><a href="#종류와-선택" class="headerlink" title="종류와 선택"></a>종류와 선택</h2><p>우선 보안성을 고려한 선택을 할 수 있다.</p><p>나와 사용자의 암호를 암호화하는데 사용할 해시함수는 앞으로도 우리의 소중한 암호들을 오랜 기간 지켜줄 수 있는 녀석으로 고르는 것이 현명할 것이기 때문이다.</p><p>앞서 설명한 MD5 함수는 <strong>매우 취약한 함수</strong>로 분류되어 해시테이블의 인덱스로 사용하거나 파일의 Checksum 생성 등의 한정된 용도를 제외한 <strong>사용자 암호 보존 용도의 사용을 권하지 않고 있다.</strong></p><p>(물론 비밀번호 생성이나 변경시 임의의 난수값을 붙여서 함께 해싱하는 방법으로 Rainbow attack 등 공격을 예방할 수 있기도 하다.<br>입력값 A에 별도의 <strong>의미없는 난수값 @</strong> 를 붙여서 해싱을 하면 A일 때와는 전혀 다른 결과값이 나온다. 이를 <strong>소금치기(Adding Salt)</strong> 라고 하고 위 경우에서 @를 <strong>소금(Salt)</strong> 이라고 한다.<br>이 때 이 난수값은 해싱된 비밀번호와 마찬가지로 별도 보관된다.)</p><p>또한, 해시함수는 그 용도와 사용방법에 따라서도 서로 다른 것을 선택할 수 있다.</p><p>완벽에 가까운 역상저항성과 충돌저항성이 필요하지 않으며 단순 파일 체크섬 생성 등의 용도로만 필요한 경우 MD5나 SHA-1같은 것을 선택할 수도 있고,</p><p>무차별 대입공격 등을 예방하기 위해 한 번의 연산에 다소간의 시간이 소요되는 함수를 일부러 선택할 수도 있으며,<br>(0.2초의 시간이 걸린다고 했을 때 사람 입장에서는 찰나의 순간일지 몰라도 수많은 경우의 수를 반복해서 대입해야 하는 공격 프로그램 입장에서는 엄청난 시간적 자원의 소모를 불러 일으킨다.)</p><p>한번에 많은 양의 해시값을 만들어야 내는 경우 혹은 하나의 입력값에 일부러 여러번의 재귀 연산을 해야되는 경우에는 속도가 빠른 함수를 골라야될 필요가 있다.</p><p>세상에는 다양한 종류의 암호화 해시 함수가 존재한다.</p><p>그중에서도 가장 대표적인 것은 단연 <strong>SHA(Secure Hash Algorithm) 함수군</strong>이며,<br>SHA 함수군은 NSA(미국 국가 안보국)에서 SHA-0이 1993년에 처음 개발되었다.</p><p>SHA함수군은 다시 또 세대별로 <strong>SHA-0, SHA-1, SHA-2, SHA-3</strong> 으로 나뉘고,<br>SHA-2 함수군은 다시 다이제스트의 길이에 따라 SHA-256, SHA-512 등으로 나뉜다.</p><p>SHA-256은 256bit의 다이제스트 길이를, SHA-512는 512bit의 다이제스트 길이를 갖는 함수로써 보통 다이제스트 길이가 길수록(출력값의 경우의 수가 많을수록) 암호화 함수로써 안정성이 높다고 본다.</p><h3 id="잡설이-길었지만-결론은-용두사미"><a href="#잡설이-길었지만-결론은-용두사미" class="headerlink" title="잡설이 길었지만.. 결론은 용두사미.."></a>잡설이 길었지만.. 결론은 용두사미..</h3><p><strong>SHA2 함수군</strong>은 2002년에 개발되었으며 그냥 일반적으로 널리 사용된다.</p><p>SHA-256 부터는 우리가 사용하는 입력값의 가짓수를 수억개 단위로 놓고 보아도, 충돌값이 나올 확률은 그냥 <strong>지구 대멸종을 야기할 소행성의 충돌 확률</strong> 보다도 더 낮다고 생각하면 되겠다.</p><p>결론적으로 일반적인 용도로는 그냥 SHA2 함수군을 사용하고, 보안에 정말 장기적인 관점에서 각별히 신경을 써야 하는 주체라면 SHA3 혹은 잘 설계된 자체 함수를 사용하면 된다.</p><h3 id="LSH-국산-해시-암호화-함수"><a href="#LSH-국산-해시-암호화-함수" class="headerlink" title="LSH 국산 해시 암호화 함수"></a>LSH 국산 해시 암호화 함수</h3><p><em>여담이지만, 국내에도 NSR이라는 기관에서 개발된 <strong>토종 국산<del>신토불이</del> 암호화 해시 함수</strong>가 있다.</em></p><p><a href="https://seed.kisa.or.kr/kisa/skill/EgovLSHInfo.do" target="_blank" rel="noopener">LSH(Lightweight Secure Hash)</a></p><p>자세한 구현 방법과 C, Java, Python 으로 작성된 소스코드도 제공하니 관심있으신 분들은 살펴보시면 좋을 것 같다.</p><p>향후 대한민국의 표준화된 해시 함수로써 자리매김할 가능성이 농후하다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;해시함수란&quot;&gt;&lt;a href=&quot;#해시함수란&quot; class=&quot;headerlink&quot; title=&quot;해시함수란&quot;&gt;&lt;/a&gt;해시함수란&lt;/h1&gt;&lt;p&gt;해시함수는 임의의 길이의 데이터를 입력받아 일정한 길이의 비트열로 반환 시켜주는 함수이다.&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="ETC" scheme="https://bityoungjae.com/categories/ETC/"/>
    
    
      <category term="해시함수" scheme="https://bityoungjae.com/tags/%ED%95%B4%EC%8B%9C%ED%95%A8%EC%88%98/"/>
    
  </entry>
  
  <entry>
    <title>Find 사용법</title>
    <link href="https://bityoungjae.com/2019/10/26/Linux/Shell%20Commands/Find%20%EC%9C%A0%ED%8B%B8%EB%A6%AC%ED%8B%B0/"/>
    <id>https://bityoungjae.com/2019/10/26/Linux/Shell Commands/Find 유틸리티/</id>
    <published>2019-10-26T08:14:39.000Z</published>
    <updated>2019-10-26T20:17:01.716Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Find 유티리티에 대한 별도 정리자료</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Find 유티리티에 대한 별도 정리자료&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
    
      <category term="Linux" scheme="https://bityoungjae.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://bityoungjae.com/tags/Linux/"/>
    
      <category term="Shell Commands" scheme="https://bityoungjae.com/tags/Shell-Commands/"/>
    
  </entry>
  
  <entry>
    <title>grep 사용법</title>
    <link href="https://bityoungjae.com/2019/10/26/Linux/Shell%20Commands/Grep%20%EC%9C%A0%ED%8B%B8%EB%A6%AC%ED%8B%B0/"/>
    <id>https://bityoungjae.com/2019/10/26/Linux/Shell Commands/Grep 유틸리티/</id>
    <published>2019-10-26T08:14:39.000Z</published>
    <updated>2019-10-26T20:17:01.716Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>정규표현식</strong>을 이용한 텍스트 검색</p></blockquote><ul><li><em>grep [Pattern] [Filename]</em><ul><li>일반적인 사용법</li><li>[Filename] 에서 [Pattern] 를 찾는다</li><li>기본적으로 Basic regular expression을 사용한다</li></ul></li><li><em>grep <strong>-i</strong> [Pattern]</em><ul><li>대소문자를 무시한다. Ignore Case</li></ul></li></ul><h2 id="Basic-regular-expression"><a href="#Basic-regular-expression" class="headerlink" title="Basic regular expression"></a>Basic regular expression</h2><ul><li>패턴에서 일부 메타문자를 일반 문자로 인식한다.<ul><li><strong>ex :</strong> ? , + , { , | , (, )</li><li>\ 를 앞에 붙여줘야 비로서 정규표현식 메타문자로 작동한다<ul><li><strong>ex :</strong> \?, \+, \{ …</li></ul></li></ul></li><li>굳이 \를 붙이고 싶지 않다면 아래의 -E 옵션 사용이 가능하다.</li></ul><h2 id="E-옵션과-F-옵션의-한-쌍"><a href="#E-옵션과-F-옵션의-한-쌍" class="headerlink" title="-E 옵션과 -F 옵션의 한 쌍"></a>-E 옵션과 -F 옵션의 한 쌍</h2><ul><li><em>grep <strong>-ie</strong> [Pattern]</em><ul><li>두번째 인자를 정규식 표현으로만 취급한다</li><li><strong>-</strong> 가 들어간 문자열을 검색할 때 용이하다<ul><li><strong>ex :</strong> grep –help | grep -e -e<ul><li>grep –help 문서에서 -e 옵션을 검색한다</li></ul></li></ul></li></ul></li><li><em>grep <strong>-Ei</strong> [Extended Regular Expression]</em><ul><li><strong>확장된 정규표현식</strong>에선 메타문자를 굳이 이스케이프하지 않아도 된다.<ul><li><strong>ex :</strong> grep –help | grep -Ei ‘\s(-e|-f)’</li></ul></li></ul></li></ul><p><img src="https://bityoungjae.com/images/imgs/grep1.gif" alt="grep 기본 예시"></p><ul><li><em>grep <strong>-Fi</strong> ‘(t|f)est’</em><ul><li>정규식을 사용하지 않고 순수 문자열로 검색</li></ul></li></ul><p><img src="https://bityoungjae.com/images/imgs/grep2.gif" alt="grep -F 기본 예시"></p><h3 id="egrep과-fgrep"><a href="#egrep과-fgrep" class="headerlink" title="egrep과 fgrep"></a>egrep과 fgrep</h3><ul><li><strong>egrep</strong> 사용시 -E 옵션 생략이 가능하다.<ul><li><strong>ex :</strong> grep –help | grep -Ei ‘\s(-e|-f)’</li><li><strong>ex :</strong> grep –help | egrep -i ‘\s-(-e|-f)’</li></ul></li><li><strong>fgrep</strong> 사용시 -F 옵션 생략이 가능하다.</li></ul><h2 id="경로-내-파일검색-및-하위-경로-탐색"><a href="#경로-내-파일검색-및-하위-경로-탐색" class="headerlink" title="경로 내 파일검색 및 하위 경로 탐색"></a>경로 내 파일검색 및 하위 경로 탐색</h2><ul><li><em>grep [Pattern] ./*</em><ul><li>해당 폴더내 파일들을 검색함</li></ul></li><li><em>grep *</em>-r** [Pattern] ./**<ul><li>하위 폴더의 파일들까지 모두 탐색함</li></ul></li></ul><h2 id="줄에-대한-정보들"><a href="#줄에-대한-정보들" class="headerlink" title="줄에 대한 정보들"></a>줄에 대한 정보들</h2><ul><li><em>grep *</em>-n** [Pattern] ./**<ul><li>매칭되는 라인번호를 표시함</li></ul></li><li><em>grep <strong>-c</strong> [Pattern] [Filename]</em><ul><li>해당 패턴이 매칭되는 줄이 총 몇 줄인지 <strong>라인 수</strong>를 출력함.</li></ul></li></ul><p><img src="https://bityoungjae.com/images/imgs/grep5.gif" alt="grep -nc 기본 예시"></p><h2 id="파일-이름-관련"><a href="#파일-이름-관련" class="headerlink" title="파일 이름 관련"></a>파일 이름 관련</h2><ul><li><em>grep *</em>-l***<ul><li>파일 이름만 출력함</li></ul></li><li><em>grep *</em>-h***<ul><li>파일 이름을 출력하지 않음</li></ul></li><li><em>grep *</em>-H***<ul><li>파일 이름을 출력함</li></ul></li></ul><p><img src="https://bityoungjae.com/images/imgs/grep4.gif" alt="grep -h 기본 예시"></p><ul><li><em>grep <strong>-C[n]</strong> [Pattern] [Filename]</em><ul><li>매칭된 라인 앞뒤로 n개 줄을 표시함.</li></ul></li><li><em>grep <strong>-m[n]</strong> [Pattern] [Filename]</em><ul><li>파일 당 출력 라인수를 제한함.</li></ul></li></ul><h2 id="저장된-패턴을-활용"><a href="#저장된-패턴을-활용" class="headerlink" title="저장된 패턴을 활용"></a>저장된 패턴을 활용</h2><ul><li><em>grep <strong>-f [Filename]</strong> [Filename]</em><ul><li>-f 뒤의 [Filename] 의 내용을 패턴으로 활용해 검색한다.</li></ul></li></ul><p><img src="https://bityoungjae.com/images/imgs/grep3.gif" alt="grep -f 기본 예시"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;정규표현식&lt;/strong&gt;을 이용한 텍스트 검색&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;grep [Pattern] [Filename]&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;일반적인 사용법&lt;/li&gt;
&lt;li&gt;[
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://bityoungjae.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://bityoungjae.com/tags/Linux/"/>
    
      <category term="Shell Commands" scheme="https://bityoungjae.com/tags/Shell-Commands/"/>
    
  </entry>
  
  <entry>
    <title>사용자 관리</title>
    <link href="https://bityoungjae.com/2019/10/26/Linux/Shell%20Commands/%EC%82%AC%EC%9A%A9%EC%9E%90%EA%B4%80%EB%A6%AC/"/>
    <id>https://bityoungjae.com/2019/10/26/Linux/Shell Commands/사용자관리/</id>
    <published>2019-10-26T08:14:39.000Z</published>
    <updated>2019-10-26T20:17:08.788Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>사용자 관리에 대한 별도 정리자료</p></blockquote><h2 id="권한에-대하여"><a href="#권한에-대하여" class="headerlink" title="권한에 대하여"></a>권한에 대하여</h2><h3 id="소유주-그룹-그-외-사람들"><a href="#소유주-그룹-그-외-사람들" class="headerlink" title="소유주, 그룹, 그 외 사람들"></a>소유주, 그룹, 그 외 사람들</h3><h3 id="rwx-로-권한을-표기한다"><a href="#rwx-로-권한을-표기한다" class="headerlink" title="rwx 로 권한을 표기한다"></a>rwx 로 권한을 표기한다</h3><h2 id="etc-passwd-에-대하여"><a href="#etc-passwd-에-대하여" class="headerlink" title="/etc/passwd 에 대하여"></a>/etc/passwd 에 대하여</h2><h3 id="etc-shadow-에-대하여"><a href="#etc-shadow-에-대하여" class="headerlink" title="/etc/shadow 에 대하여"></a>/etc/shadow 에 대하여</h3><p>과거에는 /etc/passwd 파일에 직접 인코딩된 암호를 기록하여 사용했다.</p><p>이후 Shadow Suite의 적용으로 /etc/passwd에 직접 암호를 저장하지 않고,<br>/etc/shadow 에 각 유저에 매칭되는 암호화된 암호와 암호에 관련된 다양한 설정들을 기록해 사용하는 형태로 변모하였다.</p><p>보통 /etc/passwd 는 <strong>644(rw-r-r)</strong>의 권한을 갖고,<br>/etc/shadow는 <strong>600(rw-권한없음-권한없음)</strong>의 권한을 갖는다.</p><h4 id="etc-shadow의-구조"><a href="#etc-shadow의-구조" class="headerlink" title="/etc/shadow의 구조"></a>/etc/shadow의 구조</h4><p>/etc/shadow 파일내에는 각 유저들의 <strong>암호화된 비밀번호</strong> 와 <strong>비밀번호에 관련된 설정값</strong> 들이 기록되어있다.</p><blockquote><p><code>test:$6$O71pCNwB$GnBKDEYulhNdk0QFEpuDX3Ge(중략 ...):18112:0:99999:7:::</code></p></blockquote><h5 id="각-필드-살펴보기"><a href="#각-필드-살펴보기" class="headerlink" title="각 필드 살펴보기"></a>각 필드 살펴보기</h5><p><strong>콜론 :</strong> 을 구분자로 사용해 각 필드를 구분한다.</p><ul><li>첫번째 - <em>test</em><ul><li>/etc/passwd 에 기록된 유저명과 매칭이 된다.</li></ul></li><li>두번째 - “<code>$6$O71pCNwB$GnBKDEYulhNdk0QFEpuDX3Ge(중략 ...)</code>“<ul><li>암호화된 Password 이다. (동어 반복 느낌이 나서 굳이 영단어를 썼다)</li><li>이 역시도 <strong>달러기호 $</strong> 를 구분자로 사용해 다시 필드가 나뉜다.</li><li>첫번째 - <em>6</em></li><li>두번째 - <em>O71pCNwB</em></li><li>세번째 - <em>GnBKDEYulhNdk0QFEpuDX3Ge(중략 …)</em></li></ul></li><li>세번째 - <em>18112</em></li><li>네번째 - <em>0</em></li><li>다섯번째 - <em>99999</em></li><li>여섯번째 - <em>7</em></li></ul><h4 id="해시함수"><a href="#해시함수" class="headerlink" title="해시함수"></a>해시함수</h4><p><a href="https://bityoungjae.com/2019/10/26/ETC/%ED%95%B4%EC%8B%9C%ED%95%A8%EC%88%98%EC%97%90_%EB%8C%80%ED%95%98%EC%97%AC/">부록-해시함수.md</a> 를 참고할 것.</p><p>쓰고나서 투머치한 감이 없잖게 있어서 따로 항목을 새로 만들었습니다.</p><p>사족과도 같은 내용으로 필요한 분만 간단하게 참고하는 용도로 열람하시면 될 것 같습니다.</p><h2 id="사용자-추가-삭제-수정"><a href="#사용자-추가-삭제-수정" class="headerlink" title="사용자 추가, 삭제, 수정"></a>사용자 추가, 삭제, 수정</h2><h3 id="사용자-추가하기"><a href="#사용자-추가하기" class="headerlink" title="사용자 추가하기"></a>사용자 추가하기</h3><h3 id="사용자-삭제하기"><a href="#사용자-삭제하기" class="headerlink" title="사용자 삭제하기"></a>사용자 삭제하기</h3><h4 id="사용자-삭제시-오류-사례"><a href="#사용자-삭제시-오류-사례" class="headerlink" title="사용자 삭제시 오류 사례"></a>사용자 삭제시 오류 사례</h4><h3 id="사용자-수정하기"><a href="#사용자-수정하기" class="headerlink" title="사용자 수정하기"></a>사용자 수정하기</h3><h3 id="사용자-목록-확인"><a href="#사용자-목록-확인" class="headerlink" title="사용자 목록 확인"></a>사용자 목록 확인</h3><h3 id="패스워드-변경"><a href="#패스워드-변경" class="headerlink" title="패스워드 변경"></a>패스워드 변경</h3><h2 id="그룹-추가-삭제-수정"><a href="#그룹-추가-삭제-수정" class="headerlink" title="그룹 추가, 삭제, 수정"></a>그룹 추가, 삭제, 수정</h2><h3 id="그룹-목록-확인"><a href="#그룹-목록-확인" class="headerlink" title="그룹 목록 확인"></a>그룹 목록 확인</h3><h2 id="UID-GID"><a href="#UID-GID" class="headerlink" title="UID, GID"></a>UID, GID</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;사용자 관리에 대한 별도 정리자료&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;권한에-대하여&quot;&gt;&lt;a href=&quot;#권한에-대하여&quot; class=&quot;headerlink&quot; title=&quot;권한에 대하여&quot;&gt;&lt;/a&gt;권한에 대하여&lt;/h2&gt;
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://bityoungjae.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://bityoungjae.com/tags/Linux/"/>
    
      <category term="Shell Commands" scheme="https://bityoungjae.com/tags/Shell-Commands/"/>
    
  </entry>
  
  <entry>
    <title>시스템 조작</title>
    <link href="https://bityoungjae.com/2019/10/26/Linux/Shell%20Commands/%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%A1%B0%EC%9E%91/"/>
    <id>https://bityoungjae.com/2019/10/26/Linux/Shell Commands/시스템조작/</id>
    <published>2019-10-26T08:14:39.000Z</published>
    <updated>2019-10-26T20:17:01.716Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>시스템 조작 및 간단한 시스템 정보를 조회하는 방법</p></blockquote><h2 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h2><p>시스템을 종료하거나 재부팅한다</p><ul><li><em>shutdown -h now</em><ul><li>즉시 시스템 종료</li></ul></li><li><em>shutdown -h 15</em><ul><li>15분 뒤 시스템 종료</li></ul></li><li><em>shutdown -h 22:00</em><ul><li>22:00 에 셧다운 예약</li></ul></li><li><em>shutdown -c</em><ul><li>예약된 셧다운 취소</li></ul></li><li><em>shutdown -k +15</em><ul><li>15분 뒤 종료 예정이라고 전 사용자에게 경고</li></ul></li><li><em>shutdown -r</em><ul><li>재부팅</li></ul></li></ul><p><img src="https://bityoungjae.com/images/imgs/shutdown.gif" alt="shutdown 시리즈 예시"></p><h2 id="w-who-whoami-users"><a href="#w-who-whoami-users" class="headerlink" title="w, who, whoami, users"></a>w, who, whoami, users</h2><p>접속중인 사용자들에 대한 정보를 조회한다</p><ul><li><em>w</em> 현재 접속한 사용자 목록 출력</li><li><em>who</em> 위와 동일</li><li><em>who -b</em> 시스템 부팅시간 출력<ul><li>UTC로 표기가 되므로, 한국 시간을 알고싶다면 -9시간을 계산해야 된다.</li><li><strong>UTC(Universal Time + Coordinated, 협정세계시간)</strong></li><li>한국은 <strong>UTC+9 (UTC에 9시간을 더함)</strong> 를 사용한다.</li></ul></li><li><em>whoami</em> 현재 로그인된 호스트명 출력</li><li><em>users</em> 접속된 사용자 리스트를 나열</li></ul><p><img src="https://bityoungjae.com/images/imgs/ws.gif" alt="who 시리즈 예시"></p><h2 id="id"><a href="#id" class="headerlink" title="id"></a>id</h2><p>id에 관련된 조회 동작을 실시한다</p><ul><li><em>id -un</em> 현재 호스트명 출력</li><li><em>id 1000 -un</em> uid 1000의 호스트명 출력</li><li><em>id -u</em> 현재 로그인된 계정의 uid 출력</li></ul><p><img src="https://bityoungjae.com/images/imgs/id.gif" alt="id 예시"></p><h2 id="finger"><a href="#finger" class="headerlink" title="finger"></a>finger</h2><p>특정 유저의 이름, 메일, 로그인시간 등의 정보를 확인한다</p><ul><li><em>finger -s</em><ul><li>현재 로그인된 계정의 정보를 출력</li></ul></li><li><em>finger -s username</em><ul><li>username으로 지정한 유저의 정보를 출력</li></ul></li></ul><p><img src="https://bityoungjae.com/images/imgs/finger.gif" alt="finger 예시"></p><h2 id="md5sum"><a href="#md5sum" class="headerlink" title="md5sum"></a>md5sum</h2><p>  특정 파일의 md5 체크섬을 확인</p><ul><li><em>md5sum filename</em> md5 체크섬을 출력.</li></ul><h2 id="df-Disk-Free"><a href="#df-Disk-Free" class="headerlink" title="df - Disk Free"></a>df - Disk Free</h2><p>디스크 사용정보를 출력</p><ul><li><em>df *</em>-text4 -hT***<ul><li><strong>-h</strong> 옵션으로 읽기 쉬운 단위로 출력</li><li><strong>-T</strong> 옵션으로 파일시스템 정보를 출력</li><li><strong>-t[type]</strong> 옵션으로 해당 파일시스템의 파티션만 필터링</li></ul></li></ul><p><img src="https://bityoungjae.com/images/imgs/df.gif" alt="df 예시"></p><h2 id="du-Disk-Usage"><a href="#du-Disk-Usage" class="headerlink" title="du - Disk Usage"></a>du - Disk Usage</h2><p>디스크 사용량을 표시한다</p><ul><li><em>du *</em>-hs***<ul><li><strong>-hs</strong> -&gt; Human Readable, Short</li><li>사람이 읽을 수 있게 요약해서 총량만 출력</li></ul></li><li><em>dur *</em>-hsS***<ul><li><strong>-S</strong></li><li>하위 파일 제외 순수 현재 폴더만의 디스크 사용량 표시</li></ul></li></ul><p><img src="https://bityoungjae.com/images/imgs/du.gif" alt="du 예시"></p><h2 id="free-Memory-Usage"><a href="#free-Memory-Usage" class="headerlink" title="free - Memory Usage"></a>free - Memory Usage</h2><p>메모리 사용량을 표시한다</p><ul><li><em>free *</em>-hs1***<ul><li><strong>-s1</strong> 1초에 한 번씩 사용현황을 append</li><li><strong>-t</strong> 총 사용량 행을 가장 아래에 출력</li></ul></li></ul><p><img src="https://bityoungjae.com/images/imgs/free.gif" alt="free 예시"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;시스템 조작 및 간단한 시스템 정보를 조회하는 방법&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;shutdown&quot;&gt;&lt;a href=&quot;#shutdown&quot; class=&quot;headerlink&quot; title=&quot;shutdown&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://bityoungjae.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://bityoungjae.com/tags/Linux/"/>
    
      <category term="Shell Commands" scheme="https://bityoungjae.com/tags/Shell-Commands/"/>
    
  </entry>
  
  <entry>
    <title>리눅스 파일처리 커맨드</title>
    <link href="https://bityoungjae.com/2019/10/26/Linux/Shell%20Commands/%ED%8C%8C%EC%9D%BC%EC%B2%98%EB%A6%AC/"/>
    <id>https://bityoungjae.com/2019/10/26/Linux/Shell Commands/파일처리/</id>
    <published>2019-10-26T08:14:39.000Z</published>
    <updated>2019-10-26T20:17:01.716Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>파일들을 조회하고, 지우고, 잘라내고, 복사하고, 바로가기를 만든다</p></blockquote><h2 id="ls-List"><a href="#ls-List" class="headerlink" title="ls - List"></a>ls - List</h2><ul><li><em>ls -a</em> 숨김파일 포함해 전체 출력.</li><li><em>ls -A</em> -a 와 동일하되 .와 ..를 제외하고 출력.</li><li><em>ls -l</em> 리스트 형태로 출력.<ul><li><em>ls -l (기본값)</em> 기본적으로 최종 수정시간을 표시한다 (<strong>M</strong>odified)</li><li><em>ls -lc</em> -l 옵션에서 시간을 최종 변경시간으로 표시 (<strong>C</strong>hanged)</li><li><em>ls -lu</em> -l 옵션에서 시간을 최종 접근시간으로 표시 (<strong>A</strong>ccess)</li></ul></li><li><em>ls -h</em> 파일크기를 KB, GB, MB 단위로 알아보기 쉽게 출력. (<strong>H</strong>uman)</li></ul><h3 id="ls-정렬-관련-옵션"><a href="#ls-정렬-관련-옵션" class="headerlink" title="ls - 정렬 관련 옵션"></a>ls - 정렬 관련 옵션</h3><ul><li><em>ls -t</em> 시간순으로 정렬<ul><li><em>ls -<strong>c</strong>t</em> 파일을 최종 변경시간 기준으로 정렬 (<strong>C</strong>hanged Time)</li><li><em>ls <strong>-t</strong> (기본값)</em> 파일을 최종 수정시간 기준으로 정렬 (<strong>M</strong>odified Time)</li><li><em>ls -*</em>ut<strong>* 파일을 최종 접근 시간 기준으로 정렬 (</strong>A**ccess Time)</li></ul></li><li><em>ls -S</em> 파일 크기 순서대로 정렬</li><li><em>ls -r</em> 역순으로 정렬</li></ul><h3 id="ls-시간-표기방법-변경"><a href="#ls-시간-표기방법-변경" class="headerlink" title="ls - 시간 표기방법 변경"></a>ls - 시간 표기방법 변경</h3><ul><li><em>ls -lh *</em>–time-style=long-iso***<ul><li>2019-08-02 와 같은 형태로 출력.</li></ul></li><li><em>ls -lh *</em>–time-style=’+%y/%m/%d %H:%M’***<ul><li>19/08/02 23:31 와 같은 형태로 출력.</li></ul></li></ul><p><img src="https://bityoungjae.com/images/imgs/ls.gif" alt="ls 예시"></p><h2 id="rm-Remove"><a href="#rm-Remove" class="headerlink" title="rm - Remove"></a>rm - Remove</h2><ul><li><em>rm -r</em> 디렉토리 삭제. (<strong>R</strong>ecursive, 반복되는, <em>재귀적인</em>)<br>(<strong>I</strong>nteractive, <em>반응형</em>)</li><li><em>rm \</em>.c* c 확장자 파일 다 삭제</li></ul><p><img src="https://bityoungjae.com/images/imgs/rm.gif" alt="rm 예시"></p><h2 id="mv-Move"><a href="#mv-Move" class="headerlink" title="mv - Move"></a>mv - Move</h2><ul><li><em>mv -b aa bb</em><ul><li>aa를 bb로 이동(변경)하는데 bb가 존재할 경우 bb의 백업파일을 생성한다.</li></ul></li></ul><p><img src="https://bityoungjae.com/images/imgs/mv.gif" alt="mv 예시"></p><h2 id="cp-Copy"><a href="#cp-Copy" class="headerlink" title="cp - Copy"></a>cp - Copy</h2><ul><li><em>cp ./aa/\</em> bb*<ul><li>./aa 안의 모든 파일을 bb 폴더로 옮긴다.</li></ul></li><li><em>cp -p aa bb</em><ul><li>aa의 권한, 소유주 정보를 그대로 bb로 복사</li></ul></li></ul><p><img src="https://bityoungjae.com/images/imgs/cp.gif" alt="cp 예시"></p><h3 id="rm-mv-cp-명령어의-i-v-f-옵션에-대하여"><a href="#rm-mv-cp-명령어의-i-v-f-옵션에-대하여" class="headerlink" title="rm mv cp 명령어의 -i -v -f 옵션에 대하여"></a>rm mv cp 명령어의 -i -v -f 옵션에 대하여</h3><ul><li><strong>-i</strong> : Interactive, 동작하기 전 사용자에게 재확인</li><li><strong>-v</strong> : Verbose, 동작한 내용을 출력</li><li><strong>-f</strong> : Force, 강제로 동작</li></ul><h2 id="mkdir-Make-Directory"><a href="#mkdir-Make-Directory" class="headerlink" title="mkdir - Make Directory"></a>mkdir - Make Directory</h2><ul><li><em>mkdir <strong>-p</strong> ./aa/bb</em><ul><li>./aa 경로가 없을 경우 오류가 출력되나, <strong>-p 옵션</strong>(<strong>P</strong>arents) 사용시 ./aa 생성 후 ./aa/bb 생성함.</li></ul></li><li><em>mkdir <strong>-m</strong> 777 ./aa</em><ul><li><strong>-m</strong> 옵션을 사용해 생성할 디렉토리의 권한을 지정.</li></ul></li></ul><h2 id="ln-Link"><a href="#ln-Link" class="headerlink" title="ln - Link"></a>ln - Link</h2><ul><li><em>ln aa bb</em><ul><li>ab라는 이름의 aa를 향한 <strong>하드 링크</strong>를 생성한다.</li></ul></li><li><em>ln -s aa ab</em><ul><li>ab라는 이름의 aa를 향한 <strong>심볼릭 링크</strong>를 생성한다.</li></ul></li></ul><p><img src="https://bityoungjae.com/images/imgs/ln.gif" alt="ln 예시"></p><h3 id="하드링크와-심볼릭-링크"><a href="#하드링크와-심볼릭-링크" class="headerlink" title="하드링크와 심볼릭 링크"></a>하드링크와 심볼릭 링크</h3><p>링크에는 하드링크와 심볼릭링크 두 종류가 있다.</p><h4 id="하드-링크-Hard-Link"><a href="#하드-링크-Hard-Link" class="headerlink" title="하드 링크 Hard Link"></a>하드 링크 Hard Link</h4><p>원본 파일과 동일한 <strong>Inode</strong>에 링크한다.<br>원본 파일이 삭제되어도 해당 Inode에 연결된 하드링크 파일이 있다면,<br><em>(해당 파일의 Inode 상 링크수가 0이 아니라면)</em><br>해당 파일의 Inode는 <strong>Free</strong>가 되지 않고<br>하드링크로 해당 파일에 지속 접근이 가능하다.<br>하드링크 파일과 원본 파일은 <strong>Inumber</strong>가 동일하다.<br><strong>동일한 Inode를 참조하므로 하드링크 생성으로 인해 디스크 공간이 줄어들지 않는다</strong></p><p><img src="https://bityoungjae.com/images/imgs/hardlink.gif" alt="hardlink"></p><h4 id="심볼릭-링크-Symbolic-Link"><a href="#심볼릭-링크-Symbolic-Link" class="headerlink" title="심볼릭 링크 Symbolic Link"></a>심볼릭 링크 Symbolic Link</h4><p>새로운 Inode를 생성하고,<br>해당 Inode에는 <strong>원본 파일의 주소</strong>가 기록되어 있다.<br>당연히, 원본파일이 삭제되거나 경로가 달라지면 더 이상 원본 파일의 내용에 접근이 불가하다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;파일들을 조회하고, 지우고, 잘라내고, 복사하고, 바로가기를 만든다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;ls-List&quot;&gt;&lt;a href=&quot;#ls-List&quot; class=&quot;headerlink&quot; title=&quot;ls - L
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://bityoungjae.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://bityoungjae.com/tags/Linux/"/>
    
      <category term="Shell Commands" scheme="https://bityoungjae.com/tags/Shell-Commands/"/>
    
  </entry>
  
  <entry>
    <title>리눅스 텍스트처리 커맨드</title>
    <link href="https://bityoungjae.com/2019/10/26/Linux/Shell%20Commands/%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%B2%98%EB%A6%AC/"/>
    <id>https://bityoungjae.com/2019/10/26/Linux/Shell Commands/텍스트처리/</id>
    <published>2019-10-26T08:14:39.000Z</published>
    <updated>2019-10-26T20:17:01.716Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>텍스트 처리에 관련된 기능들</p></blockquote><h2 id="cat-파일의-내용을-출력합니다"><a href="#cat-파일의-내용을-출력합니다" class="headerlink" title="cat 파일의 내용을 출력합니다"></a>cat 파일의 내용을 출력합니다</h2><ul><li><em>cat [Filename]</em><ul><li>[Filename] 의 내용을 출력합니다</li><li><em>cat [Filename1] [Filename2] …</em><ul><li>나열된 파일들을 연이어 출력합니다</li></ul></li></ul></li><li><em>cat <strong>-n</strong> [Filename]</em><ul><li>줄 번호를 붙여서 출력합니다</li></ul></li></ul><h3 id="cat을-입력도구로-사용하기"><a href="#cat을-입력도구로-사용하기" class="headerlink" title="cat을 입력도구로 사용하기"></a>cat을 입력도구로 사용하기</h3><ul><li>옵션 없이 <strong>cat</strong> 만을 사용할 경우 입력 도구로 사용이 가능합니다<ul><li><strong>ex :</strong> <em>cat &gt; [Filename]</em><ul><li>이후 텍스트를 입력하고 엔터를 치면 해당 파일에 기록이 되기 시작합니다.</li></ul></li></ul></li></ul><p><img src="https://bityoungjae.com/images/imgs/cat.gif" alt="cat 예시"></p><h2 id="head-앞-쪽만-보여줘"><a href="#head-앞-쪽만-보여줘" class="headerlink" title="head - 앞 쪽만 보여줘"></a>head - 앞 쪽만 보여줘</h2><ul><li><em>cat /etc/passwd | head -n 50</em><ul><li>위에서 50 라인만 출력.</li></ul></li><li><em>cat /etc/passwd | head -n -50</em><ul><li>아래에서 50 라인 빼고 전부 출력.</li></ul></li></ul><p><img src="https://bityoungjae.com/images/imgs/head.gif" alt="head 예시"></p><h2 id="tail-아래-쪽-보여줘"><a href="#tail-아래-쪽-보여줘" class="headerlink" title="tail - 아래 쪽 보여줘"></a>tail - 아래 쪽 보여줘</h2><ul><li>로그 조회하는 용도로 많이 사용.</li><li><em>tail /etc/passwd -n 50</em><ul><li>밑에서 50줄만 보여줘.</li></ul></li><li><em>tail /etc/passwd -F</em><ul><li>추가되는 내용을 지속 팔로우하여 출력.</li><li>파일이 삭제되었다 다시 생성되어도 re-open하여 계속 팔로우함.</li><li><strong>-f</strong> 옵션의 경우 파일 재생성시 팔로우 안 함.</li></ul></li></ul><p><img src="https://bityoungjae.com/images/imgs/tail.gif" alt="tail 예시"></p><h2 id="wc-Word-Count"><a href="#wc-Word-Count" class="headerlink" title="wc - Word Count"></a>wc - Word Count</h2><ul><li><em>wc /etc/passwd</em><ul><li>줄수 / 단어수 / 바이트 카운트 출력.</li></ul></li><li><em>wc /etc/passwd -l</em><ul><li>라인수만 출력함.</li></ul></li><li><em>wc \</em>.c -l*<ul><li>c파일의 모든 라인수 출력.</li></ul></li><li><em>wc /etc/passwd -l | awk ‘{ print $1 }’</em><ul><li>라인수만 출력함.</li></ul></li></ul><p><img src="https://bityoungjae.com/images/imgs/wc.gif" alt="wc 예시"></p><h2 id="nl-Number-Line"><a href="#nl-Number-Line" class="headerlink" title="nl - Number Line"></a>nl - Number Line</h2><ul><li><em>nl /etc/passwd</em></li><li><em>nl /etc/passwd -ba</em><ul><li>공백 라인에도 줄 번호를 출력.</li></ul></li><li><em>nl /etc/passwd -v 10</em><ul><li>번호가 10번부터 시작함.</li></ul></li></ul><p><img src="https://bityoungjae.com/images/imgs/nl.gif" alt="nl 예시"></p><h2 id="sort-파일을-정렬"><a href="#sort-파일을-정렬" class="headerlink" title="sort - 파일을 정렬"></a>sort - 파일을 정렬</h2><ul><li><em>cat /etc/passwd | sort</em></li><li><em>cat /etc/passwd | sort -r</em><ul><li><strong>-r</strong> 리버스. 거꾸로 뒤집는다.</li></ul></li><li><em>cat /etc/passwd | sort -t: -k1,1 -k2,2</em><ul><li><strong>-t</strong> 옵션으로 구분자를 정하고, <strong>-k1,1 -k2,2</strong> 옵션으로 첫번째 칼럼과 두번째 칼럼을 기준으로 잡고 정렬함.</li></ul></li></ul><p><img src="https://bityoungjae.com/images/imgs/sort.gif" alt="sort 예시"></p><h2 id="uniq-중복-제거"><a href="#uniq-중복-제거" class="headerlink" title="uniq - 중복 제거"></a>uniq - 중복 제거</h2><ul><li><strong>cat /etc/passwd | awk -F: ‘{print $1}’ | <em>uniq -i</em> | sort -k 2,2 | nl</strong> <ul><li>유저 이름을 중복없이 알파벳 순으로 정렬.</li></ul></li><li><strong>cat /etc/passwd | uniq -i -d</strong><ul><li><strong>-d</strong> 옵션은 중복된 값만 출력한다.</li></ul></li><li><strong>cat /etc/passwd | uniq -i -u</strong><ul><li><strong>-u</strong> 옵션은 중복되지 않은 유일한 값만 출력한다.</li></ul></li></ul><p><img src="https://bityoungjae.com/images/imgs/uniq.gif" alt="uniq 예시"></p><h2 id="cut-잘라내기"><a href="#cut-잘라내기" class="headerlink" title="cut - 잘라내기"></a>cut - 잘라내기</h2><ul><li><strong>cat /etc/passwd cut -d’:’ -f 1,3</strong></li></ul><p><img src="https://bityoungjae.com/images/imgs/cut.gif" alt="cut 예시"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;텍스트 처리에 관련된 기능들&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;cat-파일의-내용을-출력합니다&quot;&gt;&lt;a href=&quot;#cat-파일의-내용을-출력합니다&quot; class=&quot;headerlink&quot; title=&quot;cat 파일의 
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://bityoungjae.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://bityoungjae.com/tags/Linux/"/>
    
      <category term="Shell Commands" scheme="https://bityoungjae.com/tags/Shell-Commands/"/>
    
  </entry>
  
</feed>
